:local {
  .tab-container {
    border-bottom-color: var(--terra-tabs-structural-tab-bar-border-bottom-color, #dddedf);
    border-bottom-style: solid;
    border-bottom-width: var(--terra-tabs-structural-tab-bar-border-bottom-width, 1px);
    display: flex;
    flex: 1 1 auto;
    flex-wrap: nowrap;
    justify-content: flex-start;
    width: 100%;

    &:focus {
      outline: none;
    }

    &.is-calculating {
      visibility: hidden;
  
      /*
        * During calculations tabs should display with auto size and not grow or shrink in order to get
        * content width for truncation logic
        */
      .tab {
        flex: 0 0 auto;
      }
    }
  }

  .tab,
  .tab-menu {
    background-color: var(--terra-tabs-structural-background-color, #fff);
    background-image: var(--terra-tabs-structural-background-image, linear-gradient(to bottom, #007ee0, #007ee0));
    background-position: var(--terra-tabs-structural-background-position, 0 100%);
    background-repeat: no-repeat;
    background-size: var(--terra-tabs-structural-background-size, 0 4px);
    border-color: var(--terra-tabs-structural-border-color, #dedfe0);
    border-radius: var(--terra-tabs-structural-border-radius, 0);
    border-style: solid;
    // border-width: var(--terra-tabs-structural-border-width, 0 1px 0 0);
    border-width: 1px;
    box-shadow: var(--terra-tabs-structural-box-shadow);
    color: var(--terra-tabs-structural-color, #007ee0);
    font-size: var(--terra-tabs-font-size, 1rem);
    line-height: var(--terra-tabs-line-height, 1.4);
    font-weight: var(--terra-tabs-font-weight, normal);
    margin-left: var(--terra-tabs-structural-between-tabs-margin-left, 0);
    padding: var(--terra-tabs-padding, 0.643rem 1.071rem);
    position: var(--terra-tabs-structural-position, static);
    transition-duration: var(--terra-tabs-structural-transition-duration, 0);
    transition-property: background-size;
    transition-timing-function: var(--terra-tabs-structural-transition-timing-function, ease);

    border-top-left-radius: 10px;
    border-top-right-radius: 10px;

    span {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      word-break: normal;
      word-wrap: normal;
    }

    &:hover {
      background-color: aliceblue;
      background-image: var(--terra-tabs-structural-hover-background-image, linear-gradient(to bottom, #c8cacb, #c8cacb));
      background-size: var(--terra-tabs-structural-hover-background-size, 100% 4px);
      color: var(--terra-tabs-structural-hover-color, #000);
    }

          // Typically we use the background image to set a blue stripe and animate it...
    // However in the scenario where you need to also set the background image as a gradient to give a transparent
    // affect and make it 100% height, but you then can't use it for the blue stripe.
    &::before {
      background: var(--terra-tabs-structural-before-content-background, none);
      content: '';
      display: block;
      height: var(--terra-tabs-structural-before-content-height, 0);
      left: 0;
      position: absolute;
      top: 0;
      width: 0%;
    }

    &:focus {
      color: var(--terra-tabs-structural-focus-color, inherit);
      outline: 2px dashed #000;
      outline-offset: -2px;
      z-index: 1;
    }

    &.is-active {
      background-size: var(--terra-tabs-structural-active-background-size, 100% 4px);
      box-shadow: var(--terra-tabs-structural-active-box-shadow, none);
      color: var(--terra-tabs-structural-active-color, #000);
      font-weight: var(--terra-tabs-structural-active-font-weight, normal);
      overflow: hidden; //forces :before background-image to honor border-radius clipping.
      position: relative;
      z-index: var(--terra-tabs-structural-active-z-index);

      &::before {
        background-clip: content-box; // Make sure background fully extends
        transition-duration: var(--terra-tabs-structural-active-before-transition-duration, 0);
        transition-property: width;
        transition-timing-function: var(--terra-tabs-structural-active-before-transition-timing-function, ease);
        width: 100%;
      }

      // Same as the selectors below, but due to the specificity, you can override the variables
      // scoped specifically to the active tab
      &:hover {
        background-color: aliceblue;

        &:focus {
          background-color: aliceblue;
          
          // background-color: var(--terra-tabs-structural-active-hover-background-color, #fff);
          background-image: var(--terra-tabs-structural-hover-background-image, linear-gradient(to bottom, #c8cacb, #c8cacb));
          background-size: var(--terra-tabs-structural-active-hover-background-size, 100% 4px);
          color: var(--terra-tabs-structural-active-hover-color, #000);
        }
      }

      &:first-child {
        margin-left: 0;
      }
  
      &:last-child {
        border-width: var(--terra-tabs-structural-last-tab-border-width, 0);
      }
    }
  }

  .tab {
    flex: 0 1 auto;
    min-width: 8.357rem;
    text-align: center;

    &.is-icon-only {
      flex: 0 0 auto;
      min-width: 2.571rem;
      padding: 0.5rem 0;
    }

    &.is-text-only {
      min-width: 7.143rem;
      padding: var(--terra-tabs-text-only-padding, 0.643rem 1.071rem);
    }

    .label:nth-child(2) {
      margin-left: var(--terra-tabs-label-next-to-icon-margin-left, 0.357rem);
    }
  }

  .tab-menu {
    align-items: baseline;
    display: flex;
    flex: 0 0 auto;
    justify-content: center;
    min-width: 0;
    max-width: 100%;

    span {
      flex: 0 1 auto;
      min-width: 0;
    }

    svg {
      flex: 0 0 auto;
      font-size: 1rem;
      // margin-left: var(--terra-tabs-menu-arrow-margin-left, 0.5rem);
    }
  }
}
